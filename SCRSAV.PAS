{$F+,O+}
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Unit ScrSav;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
interface
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure RunScreenSaver;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
implementation
Uses Variable, Crt, Drivers, App, Memory, Czech;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Type

  PScreen = ^TScreen;
  TScreen = Array [1..200,1..320] Of Byte;

  TStar    = Record
               x, y  : real;
               life  : word;
               speed : real;
             end;

  TNapis   = Object
               X, Y   : Integer;
               Tx,Ty  : Shortint;
               Color  : Byte;
               Angel  : Word;
               Screen : PScreen;
               Constructor Init(TScreen : Pscreen);
               Procedure Move;
               Procedure Draw;
             End;

  TImage = Array [1..19,1..65] Of Byte;

  TScr    = array [0..199,0..319] of byte;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
var
  screen  : ^tscr;
  MouseX, MouseY    : Word;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure SetMouseCursor;assembler;
Asm
  mov ax,07h
  mov cx,0
  mov dx,79
  int 33h
  mov ax,08h
  mov cx,0
  mov dx,24
  int 33h
  mov ax,04h
  mov cx,79
  mov dx,0
  int 33h
End;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure MouseInfo;assembler;
Asm
  Mov ax,$0003
  Int $33
  Mov MouseX,cx
  Mov MouseY,dx
End;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Function MouseInstall : Boolean;Assembler;
Asm
  Mov ax,0
  Int $33
  Cmp ax,$FFFF
  Je @Ok
  mov al,false
  Jmp @End
 @Ok:
  Mov al,True
 @End:
End;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
{****************************************************************************}
{                         SETRIC PRULET HEVZDOKUPOU                          }
{****************************************************************************}
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure Init(var o : tstar);
begin with o do
begin
  x:=159+(2.0*random(2)-1)*(Random(080)+1);
  y:=099+(2.0*random(2)-1)*(Random(050)+1);
  life:=0;
  speed:=(random(255)+2)/255;
end;
end;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
procedure Setpal(c:byte;r,g,b:byte); assembler;
asm
  mov dx,$3C8
  mov al,c
  out dx,al
  inc dx
  mov al,r
  shr al,2
  out dx,al
  mov al,g
  shr al,2
  out dx,al
  mov al,b
  shr al,2
  out dx,al
end;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure DoErase(var o : tstar);
begin with o do
begin
  Screen^[round(y),round(x)]:=0;
end;
end;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure Draw( o : tstar);
begin with o do
begin
  if (round(x)>319) or (round(x)<0) or
     (round(y)>199) or (round(y)<0) then else
  Screen^[round(y),round(x)]:=life;
end;
end;

{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure makemove(var o : tstar);
var
  dist    : real; { vzdalenost od stredu }
  nx, ny  : real; { normaliz. }
begin with o do
begin
  DoErase(o);
  if life<255 then inc(life);
  dist:=sqrt(sqr(x-160)+sqr(y-100));
  dist:=sqr(dist);
  nx:=(x-160)/dist;
  ny:=(y-100)/dist;
  nx:=nx*dist/(200*speed);
  ny:=ny*dist/(200*speed);
  x:=x+nx;
  y:=y+ny;
  if (round(x)>319) or (round(x)<0) or
     (round(y)>199) or (round(y)<0) then Init(o);
  Draw(o);
end;
end;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure Stars;
var
  f  : array [1..100] of tstar;
  x  : byte;
begin
  asm
    mov ax, 13h
    int 10h
  end;
  screen:=ptr($a000,0);
  for x:=1 to 100 do Init(f[x]);
  for x:=0 to 255 do SetPal(x,x,x,x);
  repeat
    for x:=1 to 100 do MakeMove(F[x]);
  until keypressed;
  readkey;
  asm
    mov ax, 03h
    int 10h
  end;
end;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
{****************************************************************************}
{                           SETRIC NAPISY                                    }
{****************************************************************************}
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Const Image : TImage =(($01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00),
                       ($01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00),
                       ($01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00),
                       ($01,$01,$00,$00,$01,$01,$01,$01,$01,$01,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00),
                       ($01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$01,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,
                        $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,
                        $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,
                        $00,$00,$00,$00,$01,$01,$00,$00,$01,$01,$01,$01,$01,
                        $01,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,
                        $00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,
                        $01,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,
                        $01,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,
                        $01,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,
                        $01,$00,$00,$00,$00,$01,$01,$01,$01,$00,$00,$01,$01,
                        $01,$01,$00,$00,$00,$01,$01,$01,$01,$00,$00,$01,$01,
                        $01,$01,$00,$00,$01,$01,$01,$01,$01,$01,$01,$00,$01,
                        $01,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,
                        $01,$00,$00,$00,$01,$01,$01,$01,$00,$00,$00,$00,$01,
                        $01,$01,$00,$00,$01,$01,$01,$01,$00,$00,$00,$00,$01,
                        $01,$01,$00,$00,$01,$01,$01,$01,$00,$00,$00,$00,$01,
                        $01,$00,$00,$01,$01,$01,$01,$00,$00,$00,$00,$01,$01),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,
                        $01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,
                        $01,$01,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,
                        $01,$01,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,
                        $01,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,
                        $01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,
                        $01,$01,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,
                        $01,$01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,
                        $01,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $01,$01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $01,$01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,
                        $01,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $01,$01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $01,$01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,
                        $01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,
                        $01,$01,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,
                        $01,$01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01),
                       ($01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,
                        $00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,
                        $01,$01,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,
                        $01,$01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01),
                       ($01,$01,$01,$01,$00,$00,$00,$01,$01,$01,$01,$01,$00,
                        $00,$00,$00,$00,$01,$01,$01,$01,$00,$00,$01,$01,$01,
                        $01,$00,$00,$00,$01,$01,$01,$01,$00,$00,$01,$01,$01,
                        $01,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$01,$01,$01,$01,$00,$00,$01,$01,$01,$01),
                       ($01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,
                        $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,
                        $01,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,
                        $01,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01),
                       ($00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,
                        $00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$00,
                        $00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$00,
                        $00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,
                        $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$00));

Constructor Tnapis.Init;
Begin
 If Random(2)= 1 Then Tx :=-1 Else Tx :=1;
 If Random(2)= 1 Then Ty :=-1 Else Ty :=1;
 Angel := (Random(364)+1);
 Y:=(Random(178) + 2);
 X:=(Random(252) + 2);
 Color:=Random(60) + 1;
 Screen := TScreen;
End;

Procedure Tnapis.Move;
Begin
 X:=X+Tx;
 Y:=Y+Ty;
 If X<=1 Then Tx := -Tx;
 If Y<=1 Then Ty := -Ty;
 If X>=(320-66) Then Tx := -Tx;
 If Y>=(200-20) Then Ty := -Ty;
End;


Procedure Tnapis.Draw;
Var I, N : Byte;
Begin
 For I:=1 To 19 Do
 For N:=1 To 65 Do Begin
                    If Image[I,N]<>0 Then Screen^[I+Y-1,N+X-1]:= Color;
                   End;
End;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure MoveScreen(Var Zdroj,Cil; Leng : Word);Assembler;
Asm
  	  PUSH DS
  	  CLD
  	  LES DI, [cil]
  	  LDS SI, [zdroj]
	  MOV CX, [Leng]
	  SHR CX,2
          DB 66h, 0F3h, 0A5h
	  POP DS
End;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure FillScreen(Var Zdroj; Leng : Word);Assembler;
Asm
  	  PUSH DS
  	  CLD
  	  LES DI, [Zdroj]
	  MOV CX, [Leng]
          DB 66h, 033h, 0C0h
	  SHR CX,2
          DB 66h, 0F3h, 0ABh
	  POP DS
End;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure Napisy;
Var AbsoluteScreen : PScreen;
    VirtualScreen  : PScreen;
    I              : Word;
    Napisy         : Array [1..10] Of Tnapis;
    OldX, OldY     : Word;
Begin
 AbsoluteScreen := Ptr( SegA000,0);
 Randomize;
 New(VirtualScreen);
 asm
 mov Ax,0013h
 int 10h
 end;
 For I:=1 To High(Napisy) Do Napisy[I].Init(VirtualScreen);
 SetMouseCursor;MouseInfo;OldX := MouseX; OldY := MouseY;
 Repeat
 {FillChar(VirtualScreen^,SizeOf(VirtualScreen^),0);}
 FillScreen(VirtualScreen^,SizeOf(VirtualScreen^));
 For I:=1 To High(Napisy) Do Napisy[I].Draw;
 For I:=1 To High(Napisy) Do Napisy[I].Move;
 MoveScreen(VirtualScreen^,AbsoluteScreen^,SizeOf(AbsoluteScreen^));
 {AbsoluteScreen^ := VirtualScreen^;}
 MouseInfo;
 Until (Keypressed) or (OldX<> MouseX) or (OldY <>MouseY);;
 If Keypressed Then Readkey;
 Dispose(VirtualScreen);
 asm
 mov Ax,0003h
 int 10h
 end;
End;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure MonitorOff;
Var Error : Boolean;
    OldX, OldY : Word;
Begin
  Error := False;
  Asm
   mov ax,4f10h
   mov bl,00h
   int 10h
   Cmp Al,4fh
   jne @Error
   mov ax,4f10h
   mov bl,01h
   mov bh,04h
   int 10h
   Jmp @End
   @Error :
     Mov Error,True
   @End:
  End;
  If Error Then Exit;
  SetMouseCursor;MouseInfo;
  Oldx:=MouseX; OldY:=MouseY;
  Repeat
  MouseInfo;
  Until (Keypressed) Or (OldX<>MouseX) Or (OldY<>MouseY);
  If Keypressed Then Readkey;
  Asm
   mov ax,4f10h
   mov bl,01h
   mov bh,00h
   int 10h
  End;

End;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
Procedure RunScreenSaver;
Var Typ : Byte;
Begin
 Typ := Configuration.ScreenSaver.Typ;
 If Typ=3 Then Exit;
 DoneMemory;
 DoneVideo;
 DoneEvents;
 DoneSysError;
   Case Typ Of
     0: Stars;
     1: Napisy;
     2: MonitorOff;
   End;
 LoadFont;
 InitMemory;
 InitVideo;
 InitEvents;
 InitSysError;
 Asm
  mov ah,10h
  mov al,3
  xor bl,bl
  int 10h
 End;
 Application^.Redraw;
End;
{컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴}
end.